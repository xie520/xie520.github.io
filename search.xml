<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[浅谈 Swift 可选型(Optional)]]></title>
      <url>http://yoursite.com/2015/09/16/%E6%B5%85%E8%B0%88Swift%E5%8F%AF%E9%80%89%E5%9E%8B/</url>
      <content type="html"><![CDATA[<p>最近在学习Swift,这里浅谈一下Swift中非常重要的知识点 可选型(Optional)</p>
<p>虽说Swift跟Java类似,但还是有本质的区别.<br>Java属于弱类型语言,可以随便拼接,判空.但是Swift不行,Swift是强类型语言,非常注重代码的安全性,是不可以随便给对象或属性赋值nil.</p>
<p>  但是我还是想判空怎么办?这时候就需要用到 可选型(Optional).  </p>
<h2 id="可选型-Optional"><a href="#可选型-Optional" class="headerlink" title="可选型(Optional)"></a>可选型(Optional)</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">Optional</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="type">None</span></span><br><span class="line"><span class="keyword">case</span> <span class="type">Some</span>(<span class="type">T</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可选型是个泛型，而Optional又是个枚举 enum，Optional可以是 None，也可以是Some(T)    </p>
<h2 id="声明可选型"><a href="#声明可选型" class="headerlink" title="声明可选型"></a>声明可选型</h2><h3 id="显式声明"><a href="#显式声明" class="headerlink" title="显式声明"></a>显式声明</h3><p>“?” 是 Optional<t> 的简写形式.<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name:<span class="type">Optional</span>&lt;<span class="type">String</span>&gt; = <span class="string">"xie"</span></span><br><span class="line"><span class="keyword">var</span> blog:<span class="type">String</span>? = <span class="string">"xie520.github.io"</span>  </span><br><span class="line"> </span><br><span class="line"><span class="comment">// 这里可以判断</span></span><br><span class="line"><span class="keyword">if</span> name != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">print</span>(name)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">print</span>(blog)   </span><br><span class="line"> </span><br><span class="line"><span class="comment">// 输出</span></span><br><span class="line"><span class="type">Optional</span>(<span class="string">"xie"</span>)</span><br><span class="line"><span class="type">Optional</span>(<span class="string">"xie520.github.io"</span>)</span><br></pre></td></tr></table></figure></t></p>
<h3 id="隐式声明"><a href="#隐式声明" class="headerlink" title="隐式声明"></a>隐式声明</h3><p>“!” 是 ImplicitlyUnwrappedOptional<t> 的简写形式<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name1:<span class="type">ImplicitlyUnwrappedOptional</span>&lt;<span class="type">String</span>&gt; = <span class="string">"xie"</span>  </span><br><span class="line"><span class="keyword">var</span> blog1:<span class="type">String</span>! = <span class="string">"xie520.github.io"</span>  </span><br><span class="line">    </span><br><span class="line"><span class="built_in">print</span>(name1)  </span><br><span class="line"><span class="built_in">print</span>(blog1)  </span><br><span class="line">    </span><br><span class="line"><span class="comment">// 输出  </span></span><br><span class="line">xie  </span><br><span class="line">xie520.github.io</span><br></pre></td></tr></table></figure>  </t></p>
<h2 id="可选型解包"><a href="#可选型解包" class="headerlink" title="可选型解包"></a>可选型解包</h2><p>  本文开头说了,Swift属于强类型语言,所以Swift 中 String 和 Optional&lt; String&gt; 不是一个类型的,String 类型 和 Optional&lt; String&gt; 类型数据拼接肯定报错的,所以我们需要解包后使用  </p>
<h3 id="强制解包"><a href="#强制解包" class="headerlink" title="强制解包"></a>强制解包</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 显式声明的可选型变量后加 "!" 强制解包</span></span><br><span class="line"><span class="keyword">var</span> name:<span class="type">String</span>? = <span class="string">"xie"</span></span><br><span class="line"><span class="string">"My name is "</span> + name!  </span><br><span class="line">    </span><br><span class="line"><span class="comment">// 不建议使用强制解包，下面就会报错</span></span><br><span class="line">name = <span class="literal">nil</span></span><br><span class="line"><span class="string">"My name is "</span> + name!  </span><br><span class="line">    </span><br><span class="line"><span class="comment">// 隐式声明的可选型不需要解包，同样可能因为 nil 报错</span></span><br><span class="line"><span class="keyword">var</span> blog:<span class="type">String</span>! = <span class="string">"xie520.github.io"</span></span><br><span class="line"><span class="comment">// blog = nil</span></span><br><span class="line"><span class="string">"My blog is "</span> + blog</span><br></pre></td></tr></table></figure>
<h3 id="if-let-解包可选型"><a href="#if-let-解包可选型" class="headerlink" title="if let 解包可选型"></a>if let 解包可选型</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 可以使用相同的变量名解包</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> errorCode = errorCode &#123;</span><br><span class="line"><span class="built_in">print</span>(errorCode)</span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="comment">// if let 可以同时解包多个变量，同样可以使用控制转移的条件</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> errorCode = errorCode, errorMessage = errorMessage <span class="keyword">where</span> errorCode==<span class="string">"404"</span> &#123;</span><br><span class="line">    </span><br><span class="line"><span class="built_in">print</span>(<span class="string">"Page not found"</span>)</span><br><span class="line">    </span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    </span><br><span class="line"><span class="built_in">print</span>(<span class="string">"No error"</span>)</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="可选链-Optional-Chaining"><a href="#可选链-Optional-Chaining" class="headerlink" title="可选链 (Optional Chaining)"></a>可选链 (Optional Chaining)</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 把我的名字全变成大写字母</span></span><br><span class="line"><span class="keyword">var</span> name:<span class="type">String</span>? = <span class="string">"xie"</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> name = name &#123;</span><br><span class="line"><span class="built_in">print</span>(name.uppercaseString)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出</span></span><br><span class="line"><span class="type">XIE</span>  </span><br><span class="line"></span><br><span class="line"><span class="comment">// 更优雅地使用可选链实现</span></span><br><span class="line"><span class="built_in">print</span>(name?.uppercaseString)</span><br><span class="line"><span class="comment">// 输出</span></span><br><span class="line"><span class="type">XIE</span>  </span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果 name = nil 就不会继续执行 uppercaseString</span></span><br><span class="line">name = <span class="literal">nil</span></span><br><span class="line"><span class="built_in">print</span>(name?.uppercaseString)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出</span></span><br><span class="line"><span class="literal">nil</span></span><br></pre></td></tr></table></figure>
<p>当然也可以使用强制解包方式使用可选链，当然不建议使用，除非你确保它不为 nil  </p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(name!.uppercaseString)</span><br><span class="line"><span class="comment">// 输出</span></span><br><span class="line"><span class="type">XIE</span>  </span><br><span class="line">    </span><br><span class="line"><span class="comment">// 编译报错</span></span><br><span class="line">name = <span class="literal">nil</span></span><br><span class="line"><span class="built_in">print</span>(name!.uppercaseString)</span><br></pre></td></tr></table></figure>
<p>要掌握Swift, 可选型 是必须要理解的知识点  </p>
<p>  最后,感谢 <a href="http://sunfusheng.com" target="_blank" rel="external">孙福生</a> 同志的指导</p>
]]></content>
    </entry>
    
  
  
</search>
