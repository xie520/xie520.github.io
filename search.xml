<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[仿酷狗音乐App翻页动画效果]]></title>
      <url>http://yoursite.com/2016/05/23/%E4%BB%BF%E9%85%B7%E7%8B%97%E7%BF%BB%E9%A1%B5%E5%8A%A8%E7%94%BB%E6%95%88%E6%9E%9C/</url>
      <content type="html"><![CDATA[<p>转载请注明出处,谢谢^<br>最近一直用酷狗音乐app听歌,发现其歌曲详情页的翻页动画效果很有操作感<br>于是尝试去实现它.</p>
<h2 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h2><p><img src="http://i2.buimg.com/87715d9e6b16eea3.gif" alt=""></p>
<h2 id="分析猜想"><a href="#分析猜想" class="headerlink" title="分析猜想"></a>分析猜想</h2><p>如效果图,猜想是在view上添加平移手势.然后计算出水平方向移动的x值与角度之间的关系,求出实时的角度,最后需用到核心动画,让view进行实时的旋转.</p>
<p>实现这效果比较难的地方就是偏移量x的值与旋转角度之间的关系,经过一系列的计算与测试博主最终得出了它们的关系公式,由于比较抽象这里我也不过多的详细解释,直接上代码.</p>
<h2 id="viewDidLoad"><a href="#viewDidLoad" class="headerlink" title="viewDidLoad"></a>viewDidLoad</h2><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建了名为rotationViewController的控制器</span></span><br><span class="line"><span class="comment">//为了效果更直观,没有对控制器的view直接操作,而是添加了黄色yellowView在控制器view上对其进行操作</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">rotationViewController</span> ()</span></span><br><span class="line">&#123;</span><br><span class="line">     <span class="built_in">CGPoint</span> _startTouch;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>,<span class="keyword">assign</span>) <span class="built_in">BOOL</span> isMoving;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>,<span class="keyword">weak</span>) <span class="built_in">UIView</span> *yellowView;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">rotationController</span></span></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</span><br><span class="line">    [<span class="keyword">super</span> viewDidLoad];</span><br><span class="line"></span><br><span class="line"><span class="comment">//添加黄色的view</span></span><br><span class="line">    <span class="built_in">UIView</span> *yellowView = [[<span class="built_in">UIView</span> alloc]init];</span><br><span class="line">    yellowView.backgroundColor = [<span class="built_in">UIColor</span> yellowColor];</span><br><span class="line">    yellowView.frame = <span class="keyword">self</span>.view.bounds;</span><br><span class="line">    [<span class="keyword">self</span>.view addSubview:yellowView];</span><br><span class="line">    _yellowView = yellowView;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="comment">//绿色view为控制器view背景色</span></span><br><span class="line">    <span class="keyword">self</span>.view.backgroundColor = [<span class="built_in">UIColor</span> greenColor];</span><br><span class="line">    </span><br><span class="line"><span class="comment">//手势</span></span><br><span class="line">    <span class="built_in">UIPanGestureRecognizer</span> *panGestureRecognizer = [[<span class="built_in">UIPanGestureRecognizer</span> alloc] initWithTarget:<span class="keyword">self</span> action:<span class="keyword">@selector</span>(panGestureRecognizer:)];</span><br><span class="line">    </span><br><span class="line">    [_yellowView addGestureRecognizer:panGestureRecognizer];</span><br><span class="line">    </span><br><span class="line"><span class="comment">//这个方法必须实现</span></span><br><span class="line">    [<span class="keyword">self</span> setAnchorPoint:<span class="built_in">CGPointMake</span>(<span class="number">0.5</span>, <span class="number">1.2</span>) forView:_yellowView];</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//手势执行的方法</span></span><br><span class="line">- (<span class="keyword">void</span>)panGestureRecognizer:(<span class="built_in">UIPanGestureRecognizer</span> *)recoginzer</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">CGPoint</span> touchPoint = [recoginzer locationInView:[[<span class="built_in">UIApplication</span> sharedApplication] keyWindow]];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (recoginzer.state == <span class="built_in">UIGestureRecognizerStateBegan</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        _isMoving = <span class="literal">YES</span>;</span><br><span class="line">        _startTouch = touchPoint;    </span><br><span class="line">    </span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span> (recoginzer.state == <span class="built_in">UIGestureRecognizerStateEnded</span>)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="comment">//当x轴方向移动的值超过180</span></span><br><span class="line">        <span class="keyword">if</span> (touchPoint.x - _startTouch.x &gt; <span class="number">180</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            [<span class="built_in">UIView</span> animateWithDuration:<span class="number">0.3</span> animations:^&#123;</span><br><span class="line">                [<span class="keyword">self</span> moveViewWithX:<span class="number">1910</span>];</span><br><span class="line">            &#125; completion:^(<span class="built_in">BOOL</span> finished) &#123;</span><br><span class="line">                _isMoving = <span class="literal">NO</span>;</span><br><span class="line">            &#125;];</span><br><span class="line">        </span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (touchPoint.x - _startTouch.x &lt; <span class="number">-180</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            [<span class="built_in">UIView</span> animateWithDuration:<span class="number">0.3</span> animations:^&#123;</span><br><span class="line">                [<span class="keyword">self</span> moveViewWithX:<span class="number">-1910</span>];</span><br><span class="line">            &#125; completion:^(<span class="built_in">BOOL</span> finished) &#123;</span><br><span class="line">                _isMoving = <span class="literal">NO</span>;</span><br><span class="line">            &#125;];</span><br><span class="line">        </span><br><span class="line">        &#125;<span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            [<span class="built_in">UIView</span> animateWithDuration:<span class="number">0.3</span> animations:^</span><br><span class="line">             &#123;</span><br><span class="line">                 _yellowView.transform = <span class="built_in">CGAffineTransformIdentity</span>;</span><br><span class="line">             &#125; completion:^(<span class="built_in">BOOL</span> finished) &#123;</span><br><span class="line">                 _isMoving = <span class="literal">NO</span>;</span><br><span class="line">             &#125;];</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    </span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span> (recoginzer.state == <span class="built_in">UIGestureRecognizerStateCancelled</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        [<span class="built_in">UIView</span> animateWithDuration:<span class="number">0.3</span> animations:^&#123;</span><br><span class="line">            [<span class="keyword">self</span> moveViewWithX:<span class="number">0</span>];</span><br><span class="line">        &#125; completion:^(<span class="built_in">BOOL</span> finished) &#123;</span><br><span class="line">            _isMoving = <span class="literal">NO</span>;</span><br><span class="line">        &#125;];</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (_isMoving)</span><br><span class="line">        [<span class="keyword">self</span> moveViewWithX:touchPoint.x - _startTouch.x];    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="核心方法"><a href="#核心方法" class="headerlink" title="核心方法"></a>核心方法</h2><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取旋转的角度</span></span><br><span class="line">- (<span class="keyword">void</span>)moveViewWithX:(<span class="keyword">float</span>)x</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//计算角度</span></span><br><span class="line">   <span class="keyword">double</span> r = M_PI/<span class="number">6</span> * (x/<span class="number">320</span>);</span><br><span class="line"><span class="comment">//旋转   </span></span><br><span class="line">    _yellowView.transform = <span class="built_in">CGAffineTransformMakeRotation</span>(r);  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//这里必须设置,不然view的旋转会不受控制</span></span><br><span class="line">- (<span class="keyword">void</span>)setAnchorPoint:(<span class="built_in">CGPoint</span>)anchorPoint forView:(<span class="built_in">UIView</span> *)view</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">CGPoint</span> oldOrigin = view.frame.origin;</span><br><span class="line">    view.layer.anchorPoint = anchorPoint;</span><br><span class="line">    <span class="built_in">CGPoint</span> newOrigin = view.frame.origin;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">CGPoint</span> transition;</span><br><span class="line">    transition.x = newOrigin.x - oldOrigin.x;</span><br><span class="line">    transition.y = newOrigin.y - oldOrigin.y;</span><br><span class="line">    </span><br><span class="line">    view.center = <span class="built_in">CGPointMake</span> (view.center.x - transition.x, view.center.y - transition.y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>
<h2 id="欢迎转载-请注明出处"><a href="#欢迎转载-请注明出处" class="headerlink" title="欢迎转载,请注明出处!"></a>欢迎转载,请注明出处!</h2><p>最后,还有什么疑问的,请留言吧^</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[浅谈 Swift 可选型(Optional)]]></title>
      <url>http://yoursite.com/2015/09/16/%E6%B5%85%E8%B0%88Swift%E5%8F%AF%E9%80%89%E5%9E%8B/</url>
      <content type="html"><![CDATA[<p>最近在学习Swift,这里浅谈一下Swift中非常重要的知识点 可选型(Optional)</p>
<p>虽说Swift跟Java类似,但还是有本质的区别.<br>Java属于弱类型语言,可以随便拼接,判空.但是Swift不行,Swift是强类型语言,非常注重代码的安全性,是不可以随便给对象或属性赋值nil.</p>
<p>  但是我还是想判空怎么办?这时候就需要用到 可选型(Optional).  </p>
<h2 id="可选型-Optional"><a href="#可选型-Optional" class="headerlink" title="可选型(Optional)"></a>可选型(Optional)</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">Optional</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="type">None</span></span><br><span class="line"><span class="keyword">case</span> <span class="type">Some</span>(<span class="type">T</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可选型是个泛型，而Optional又是个枚举 enum，Optional可以是 None，也可以是Some(T)    </p>
<h2 id="声明可选型"><a href="#声明可选型" class="headerlink" title="声明可选型"></a>声明可选型</h2><h3 id="显式声明"><a href="#显式声明" class="headerlink" title="显式声明"></a>显式声明</h3><p>“?” 是 Optional<t> 的简写形式.<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name:<span class="type">Optional</span>&lt;<span class="type">String</span>&gt; = <span class="string">"xie"</span></span><br><span class="line"><span class="keyword">var</span> blog:<span class="type">String</span>? = <span class="string">"xie520.github.io"</span>  </span><br><span class="line"> </span><br><span class="line"><span class="comment">// 这里可以判断</span></span><br><span class="line"><span class="keyword">if</span> name != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">print</span>(name)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">print</span>(blog)   </span><br><span class="line"> </span><br><span class="line"><span class="comment">// 输出</span></span><br><span class="line"><span class="type">Optional</span>(<span class="string">"xie"</span>)</span><br><span class="line"><span class="type">Optional</span>(<span class="string">"xie520.github.io"</span>)</span><br></pre></td></tr></table></figure></t></p>
<h3 id="隐式声明"><a href="#隐式声明" class="headerlink" title="隐式声明"></a>隐式声明</h3><p>“!” 是 ImplicitlyUnwrappedOptional<t> 的简写形式<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name1:<span class="type">ImplicitlyUnwrappedOptional</span>&lt;<span class="type">String</span>&gt; = <span class="string">"xie"</span>  </span><br><span class="line"><span class="keyword">var</span> blog1:<span class="type">String</span>! = <span class="string">"xie520.github.io"</span>  </span><br><span class="line">    </span><br><span class="line"><span class="built_in">print</span>(name1)  </span><br><span class="line"><span class="built_in">print</span>(blog1)  </span><br><span class="line">    </span><br><span class="line"><span class="comment">// 输出  </span></span><br><span class="line">xie  </span><br><span class="line">xie520.github.io</span><br></pre></td></tr></table></figure>  </t></p>
<h2 id="可选型解包"><a href="#可选型解包" class="headerlink" title="可选型解包"></a>可选型解包</h2><p>  本文开头说了,Swift属于强类型语言,所以Swift 中 String 和 Optional&lt; String&gt; 不是一个类型的,String 类型 和 Optional&lt; String&gt; 类型数据拼接肯定报错的,所以我们需要解包后使用  </p>
<h3 id="强制解包"><a href="#强制解包" class="headerlink" title="强制解包"></a>强制解包</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 显式声明的可选型变量后加 "!" 强制解包</span></span><br><span class="line"><span class="keyword">var</span> name:<span class="type">String</span>? = <span class="string">"xie"</span></span><br><span class="line"><span class="string">"My name is "</span> + name!  </span><br><span class="line">    </span><br><span class="line"><span class="comment">// 不建议使用强制解包，下面就会报错</span></span><br><span class="line">name = <span class="literal">nil</span></span><br><span class="line"><span class="string">"My name is "</span> + name!  </span><br><span class="line">    </span><br><span class="line"><span class="comment">// 隐式声明的可选型不需要解包，同样可能因为 nil 报错</span></span><br><span class="line"><span class="keyword">var</span> blog:<span class="type">String</span>! = <span class="string">"xie520.github.io"</span></span><br><span class="line"><span class="comment">// blog = nil</span></span><br><span class="line"><span class="string">"My blog is "</span> + blog</span><br></pre></td></tr></table></figure>
<h3 id="if-let-解包可选型"><a href="#if-let-解包可选型" class="headerlink" title="if let 解包可选型"></a>if let 解包可选型</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 可以使用相同的变量名解包</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> errorCode = errorCode &#123;</span><br><span class="line"><span class="built_in">print</span>(errorCode)</span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="comment">// if let 可以同时解包多个变量，同样可以使用控制转移的条件</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> errorCode = errorCode, errorMessage = errorMessage <span class="keyword">where</span> errorCode==<span class="string">"404"</span> &#123;</span><br><span class="line">    </span><br><span class="line"><span class="built_in">print</span>(<span class="string">"Page not found"</span>)</span><br><span class="line">    </span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    </span><br><span class="line"><span class="built_in">print</span>(<span class="string">"No error"</span>)</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="可选链-Optional-Chaining"><a href="#可选链-Optional-Chaining" class="headerlink" title="可选链 (Optional Chaining)"></a>可选链 (Optional Chaining)</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 把我的名字全变成大写字母</span></span><br><span class="line"><span class="keyword">var</span> name:<span class="type">String</span>? = <span class="string">"xie"</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> name = name &#123;</span><br><span class="line"><span class="built_in">print</span>(name.uppercaseString)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出</span></span><br><span class="line"><span class="type">XIE</span>  </span><br><span class="line"></span><br><span class="line"><span class="comment">// 更优雅地使用可选链实现</span></span><br><span class="line"><span class="built_in">print</span>(name?.uppercaseString)</span><br><span class="line"><span class="comment">// 输出</span></span><br><span class="line"><span class="type">XIE</span>  </span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果 name = nil 就不会继续执行 uppercaseString</span></span><br><span class="line">name = <span class="literal">nil</span></span><br><span class="line"><span class="built_in">print</span>(name?.uppercaseString)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出</span></span><br><span class="line"><span class="literal">nil</span></span><br></pre></td></tr></table></figure>
<p>当然也可以使用强制解包方式使用可选链，当然不建议使用，除非你确保它不为 nil  </p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(name!.uppercaseString)</span><br><span class="line"><span class="comment">// 输出</span></span><br><span class="line"><span class="type">XIE</span>  </span><br><span class="line">    </span><br><span class="line"><span class="comment">// 编译报错</span></span><br><span class="line">name = <span class="literal">nil</span></span><br><span class="line"><span class="built_in">print</span>(name!.uppercaseString)</span><br></pre></td></tr></table></figure>
<p>要掌握Swift, 可选型 是必须要理解的知识点  </p>
<p>  最后,感谢 <a href="http://sunfusheng.com" target="_blank" rel="external">孙福生</a> 同志的指导</p>
]]></content>
    </entry>
    
  
  
</search>
